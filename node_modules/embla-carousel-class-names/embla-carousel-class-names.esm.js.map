{"version":3,"file":"embla-carousel-class-names.esm.js","sources":["src/components/Options.ts","src/components/utils.ts","src/components/index.ts"],"sourcesContent":["export type OptionsType = {\n  selected: string\n  draggable: string\n  dragging: string\n}\n\nexport const defaultOptions: OptionsType = {\n  selected: 'is-selected',\n  draggable: 'is-draggable',\n  dragging: 'is-dragging',\n}\n\nexport type ClassNamesOptionsType = Partial<OptionsType>\n","export function removeClass(node: HTMLElement, className: string): void {\n  const cl = node.classList\n  if (className && cl.contains(className)) cl.remove(className)\n}\n\nexport function addClass(node: HTMLElement, className: string): void {\n  const cl = node.classList\n  if (className && !cl.contains(className)) cl.add(className)\n}\n","import { defaultOptions, ClassNamesOptionsType, OptionsType } from './Options'\nimport { addClass, removeClass } from './utils'\nimport {\n  EmblaCarouselType,\n  EmblaPluginType,\n  EmblaEventType,\n} from 'embla-carousel'\n\nexport type ClassNamesType = EmblaPluginType<OptionsType>\n\nfunction ClassNames(userOptions?: ClassNamesOptionsType): ClassNamesType {\n  const options = Object.assign(\n    {},\n    defaultOptions,\n    ClassNames.globalOptions,\n    userOptions,\n  )\n  const { selected, draggable, dragging } = options\n  const selectedEvents: EmblaEventType[] = ['select', 'pointerUp']\n  const draggingEvents: EmblaEventType[] = ['pointerDown', 'pointerUp']\n\n  let carousel: EmblaCarouselType\n  let root: HTMLElement\n  let slides: HTMLElement[]\n\n  function init(embla: EmblaCarouselType): void {\n    carousel = embla\n    root = carousel.rootNode()\n    slides = carousel.slideNodes()\n    const isDraggable = carousel.internalEngine().options.draggable\n\n    if (isDraggable) {\n      addClass(root, draggable)\n    }\n    if (dragging) {\n      draggingEvents.forEach((evt) => carousel.on(evt, toggleDraggingClass))\n    }\n    if (selected) {\n      selectedEvents.forEach((evt) => carousel.on(evt, toggleSelectedClass))\n      toggleSelectedClass()\n    }\n  }\n\n  function destroy(): void {\n    removeClass(root, draggable)\n    draggingEvents.forEach((evt) => carousel.off(evt, toggleDraggingClass))\n    selectedEvents.forEach((evt) => carousel.off(evt, toggleSelectedClass))\n    slides.forEach((slide) => removeClass(slide, selected))\n  }\n\n  function toggleDraggingClass(evt: EmblaEventType): void {\n    if (evt === 'pointerDown') addClass(root, dragging)\n    else removeClass(root, dragging)\n  }\n\n  function toggleSelectedClass(): void {\n    const inView = carousel.slidesInView(true)\n    const notInView = carousel.slidesNotInView(true)\n    notInView.forEach((index) => removeClass(slides[index], selected))\n    inView.forEach((index) => addClass(slides[index], selected))\n  }\n\n  const self: ClassNamesType = {\n    name: 'ClassNames',\n    options,\n    init,\n    destroy,\n  }\n  return self\n}\n\nClassNames.globalOptions = <ClassNamesOptionsType | undefined>undefined\n\nexport default ClassNames\n"],"names":["defaultOptions","selected","draggable","dragging","removeClass","node","className","cl","classList","contains","remove","addClass","add","ClassNames","userOptions","options","Object","assign","globalOptions","selectedEvents","draggingEvents","carousel","root","slides","init","embla","rootNode","slideNodes","isDraggable","internalEngine","forEach","evt","on","toggleDraggingClass","toggleSelectedClass","destroy","off","slide","inView","slidesInView","notInView","slidesNotInView","index","self","name","undefined"],"mappings":"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"}